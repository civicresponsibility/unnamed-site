# When starting with a fresh database, create the tables.
./manage.py migrate

# Must load actor and recipient files at once because they have
# a circular dependency
./manage.py loaddata fixtures/actor.yaml fixtures/recipient.yaml

# Create:
#   4 triggers (1..4)
#   3 organizations
#   16 campaigns:
#     * 1-4 is trigger 1, 5-8 is trigger 2, 9-12 is trigger 3, 13-16 is trigger 4
#     * 1, 5, 9, and 13 have no owner.
#     * 2, 6, 10, 14 are for org1 and have a TriggerCustomization
#     * 3, 7, 11, 15 are for org2 and have a TriggerCustomization with a fixed outcome.
#     * 4, 8, 12, 16 are for org3 but with no TriggerCustomization.
fixtures/sample-triggers 

# Create a bunch of random pledges on triggers 1-2 (campaigns 1 through 8).
for c in {1..8}; do
	for x in {1..8}; do
		fixtures/create-random-pledge $c
	done
done

# Execute triggers 2 through 4.
for c in {2..4}; do
	fixtures/execute-trigger $c
done

# Create additional post-execution pledges on triggers 3 and 4 (campaigns 9 through 16).
for c in {9..16}; do
	for x in {1..4}; do
		fixtures/create-random-pledge $c
	done
done

# Do what we need to do before we can execute pledges.
./manage.py send_pledge_emails

# Execute pledges. Since we made up billing tokens we
# disable Democracy Engine here.
NO_DE=1 ./manage.py execute_pledges

# Create additional unexecuted post-execution pledges on trigger 4 (campaigns 13 through 16).
for c in {13..16}; do
	for x in {1..4}; do
		fixtures/create-random-pledge $c
	done
done

# Make a superuser if one doesn't already exist.
./manage.py createsuperuser --email=ops@if.then.fund --noinput
echo "from itfsite.models import User; u = User.objects.get(email='ops@if.then.fund'); u.set_password('1234'); u.save()" | ./manage.py shell
